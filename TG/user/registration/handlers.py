import asyncio

from aiogram import F, types, Router, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession

from TG.filters import user_is_not_registered

from Database.Orm_query import orm_query

from TG.user.registration.kbds import finish_registration_buttons




class UserRegistration(StatesGroup):
    Start_registration = State()
    Get_name = State()
    Get_phone_number = State()
    Get_group = State()
    Get_experiense = State()
    Finish_registretion = State()


router = Router()
router.message.filter(user_is_not_registered())
router.callback_query.filter(user_is_not_registered())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
# —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è , —á—å–∏ id –∑–∞–ø–∏—Å–∞–Ω—ã –≤ state_data.sent_messages 
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ stste_data.sent_messages, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
# —É–¥–∞–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–ª–∞–≥ delete_message —Å—Ç–æ–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ true
async def clean_chat(state:FSMContext, message:types.Message, sent_messages:list[types.Message] = None, delete_message:bool = True):

    data = await state.get_data()

    if "sent_messages" in data.keys():
        messages = data["sent_messages"]
        if(messages != None):
            for m in messages:
                await message.bot.delete_message(chat_id = message.from_user.id, message_id = m.message_id)
            await state.update_data(sent_messages = None)

    if(sent_messages != None):
        await state.update_data(sent_messages = sent_messages)

    if(delete_message):
        await message.delete()




async def start_registration(message:types.Message, state:FSMContext):
    sm1 = await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!‚úã\n" +
                        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ \n" +
                        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚úíÔ∏è")
    sm2 = await message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è:")

    await state.set_state(UserRegistration.Get_name)


    await clean_chat(state, message, [sm1, sm2]) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    
@router.message(UserRegistration.Get_name)
async def get_name(message:types.Message, state:FSMContext):
    await state.update_data(name = message.text)
    data = await state.get_data()
    name = data["name"]

    sm = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}.\n" +
                            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.üìû")
    await state.set_state(UserRegistration.Get_phone_number)


    await clean_chat(state, message, [sm]) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    
# –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø!!!!!!!!!!!!!!
@router.message(UserRegistration.Get_phone_number)
async def get_phone_number(message:types.Message, state:FSMContext):
    await state.update_data(phone_number = message.text)
    await state.set_state(UserRegistration.Get_group)
    sm = await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.\n –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ")
    
    await clean_chat(state, message, [sm]) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞


#–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
@router.message(UserRegistration.Get_group)
async def get_group(message:types.Message, state:FSMContext):
    await state.update_data(group = message.text)
    await state.set_state(UserRegistration.Get_experiense)
    sm = await message.answer("–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –æ–ø—ã—Ç —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è:")

    await clean_chat(state, message, [sm]) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞



@router.message(UserRegistration.Get_experiense)
async def get_experience(message:types.Message, state:FSMContext, session = AsyncSession):
    await state.update_data(experience = message.text)
    data = await state.get_data()
    admins = await orm_query.get_all_admins(session = session)

    #temp function:
    for admin in admins:
        await message.bot.send_message(chat_id = admin.id)

    name = data["name"]
    phone_num = data["phone_number"]
    group = data["group"]
    exp = data["experience"]
    sm = await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:" +
                        f"  –ò–º—è: {name}\n" +
                        f"  –¢–µ–ª–µ—Ñ–æ–Ω: {phone_num}\n" +
                        f"  –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {group}\n" +
                        f"  –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {exp}", reply_markup = finish_registration_buttons())
    await state.set_state(UserRegistration.Finish_registretion)
    
    await clean_chat(state, message, [sm]) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞

@router.callback_query(StateFilter(UserRegistration.Finish_registretion), F.data == "finish_registration")
async def finish_registration(callback:types.CallbackQuery, state:FSMContext, session:FSMContext):
    data = await state.get_data()
    await orm_query.add_user(session = session, user_id = callback.from_user.id, name = data["name"], phone_number = data["phone_number"], start_group_id = None)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
    await state.clear()

    await clean_chat(state, callback.message) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞

@router.callback_query(F.data == "again")
async def registration_again(callback:types.CallbackQuery, state:FSMContext):
    await state.clear()
    await state.set_state(UserRegistration.Get_name)
    await start_registration(message = callback.message, state = state)

    clean_chat(state, callback.message) # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞


router.message.register(start_registration, StateFilter(None))